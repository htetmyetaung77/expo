{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/loaders/utils.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;AAUH,kDAMC;AAWD,gEAIC;AASD,8CAiBC;AAvDD;;;;;;;GAOG;AACH,SAAgB,mBAAmB,CAAC,QAAgB;IAClD,MAAM,SAAS,GAAG,IAAI,GAAG,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAC,QAAQ,CAAC;IACjE,MAAM,cAAc,GAAG,SAAS,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;IAC9E,MAAM,WAAW,GAAG,cAAc,KAAK,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,cAAc,CAAC;IAEvE,OAAO,iBAAiB,WAAW,KAAK,CAAC;AAC3C,CAAC;AAED;;;;;;;;GAQG;AACH,SAAgB,0BAA0B,CAAC,UAAkB;IAC3D,OAAO,CACL,UAAU,CAAC,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,IAAI,GAAG,CAC5F,CAAC;AACJ,CAAC;AAED;;;;;;GAMG;AACI,KAAK,UAAU,iBAAiB,CAAC,SAAiB;IACvD,MAAM,UAAU,GAAG,mBAAmB,CAAC,SAAS,CAAC,CAAC;IAElD,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,UAAU,CAAC,CAAC;IACzC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;QACjB,MAAM,IAAI,KAAK,CAAC,gCAAgC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;IACrE,CAAC;IAED,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;IAEnC,kDAAkD;IAClD,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;IAClD,IAAI,KAAK,EAAE,CAAC;QACV,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9B,CAAC;IAED,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;AAClD,CAAC","sourcesContent":["/**\n * Copyright Â© 2025 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Convert a route pathname to a loader module path.\n *\n * Examples:\n * - `/` becomes `/_expo/loaders/index.js`\n * - `/posts/1` becomes `/_expo/loaders/posts/1.js`\n * - `/about` becomes `/_expo/loaders/about.js`\n */\nexport function getLoaderModulePath(pathname: string): string {\n  const cleanPath = new URL(pathname, 'http://localhost').pathname;\n  const normalizedPath = cleanPath === '/' ? '/' : cleanPath.replace(/\\/$/, '');\n  const pathSegment = normalizedPath === '/' ? '/index' : normalizedPath;\n\n  return `/_expo/loaders${pathSegment}.js`;\n}\n\n/**\n * Convert a loader module path back to a route pathname.\n * This is the inverse operation of `getLoaderModulePath()`.\n *\n * Examples:\n * - `/_expo/loaders/index.js` becomes `/`\n * - `/_expo/loaders/posts/1.js` becomes `/posts/1`\n * - `/_expo/loaders/about.js` becomes `/about`\n */\nexport function getRoutePathFromLoaderPath(loaderPath: string): string {\n  return (\n    loaderPath.replace('/_expo/loaders', '').replace(/\\.js$/, '').replace('/index', '/') || '/'\n  );\n}\n\n/**\n * Fetches and parses a loader module from the given route path.\n * This works in all environments including:\n * 1. Development with Metro dev server (see `LoaderModuleMiddleware`)\n * 2. Production with static files (SSG)\n * 3. SSR environments\n */\nexport async function fetchLoaderModule(routePath: string): Promise<any> {\n  const loaderPath = getLoaderModulePath(routePath);\n\n  const response = await fetch(loaderPath);\n  if (!response.ok) {\n    throw new Error(`Failed to fetch loader data: ${response.status}`);\n  }\n\n  const text = await response.text();\n\n  // Modules are generated as: export default {json}\n  const match = text.match(/export default (.+)$/m);\n  if (match) {\n    return JSON.parse(match[1]);\n  }\n\n  throw new Error('Invalid loader module format');\n}\n"]}