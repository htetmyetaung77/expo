{"version":3,"file":"resolveLoaderPath.js","sourceRoot":"","sources":["../../src/utils/resolveLoaderPath.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBH,0DAmBC;AAlCD,gDAAkC;AAQlC;;;;;;GAMG;AACH,SAAgB,uBAAuB,CACrC,UAAkB,EAClB,OAAgC;IAEhC,IAAI,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;IAExD,iFAAiF;IACjF,IAAI,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC;QACrE,IAAI,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC;YAChC,MAAM,QAAQ,GAAG,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YAC9C,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC;YAClE,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAC9C,CAAC;aAAM,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,CAAC;YACxC,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC;YAClE,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;QAChD,CAAC;IACH,CAAC;IAED,OAAO,UAAU,CAAC;AACpB,CAAC","sourcesContent":["/**\n * Copyright Â© 2025 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport * as path from 'node:path';\n\nexport interface LoaderResolutionOptions {\n  isExporting?: boolean;\n  projectRoot?: string;\n  routerRoot?: string;\n}\n\n/**\n * Resolves a loader's module path.\n *\n * In development mode: Returns a Metro-compatible relative path\n * In export mode: Returns an absolute filesystem path\n *\n */\nexport function resolveLoaderModulePath(\n  contextKey: string,\n  options: LoaderResolutionOptions\n): string {\n  let modulePath = contextKey.replace(/\\.(js|ts)x?$/, '');\n\n  // When exporting, we need an absolute filesystem path for Node.js to `require()`\n  if (options.isExporting && options.projectRoot && options.routerRoot) {\n    if (modulePath.startsWith('./')) {\n      const fileName = modulePath.replace('./', '');\n      const appDir = path.join(options.projectRoot, options.routerRoot);\n      modulePath = path.resolve(appDir, fileName);\n    } else if (!path.isAbsolute(modulePath)) {\n      const appDir = path.join(options.projectRoot, options.routerRoot);\n      modulePath = path.resolve(appDir, modulePath);\n    }\n  }\n\n  return modulePath;\n}\n"]}